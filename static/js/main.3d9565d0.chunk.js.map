{"version":3,"sources":["SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","onSubmit","event","preventDefault","onFormSubmit","className","type","placeholder","onChange","onSearchValueChange","target","value","disabled","isSearching","onClick","onSingleSearchClick","App","state","searchTerm","jokes","isFetchingJokes","onSearchChange","bind","searchJokes","limit","this","setState","fetch","method","headers","Accept","then","response","json","results","map","item","key","id","joke","src","alt","renderJokes","React","Component","rootElement","document","getElementById","ReactDOM","render","version","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uRA6BeA,G,MA1BI,SAAAC,GAKf,OACI,0BAAMC,SALO,SAAAC,GACbA,EAAMC,iBACNH,EAAMI,gBAGoBC,UAAU,eAChC,2BACIC,KAAK,OACLC,YAAY,uBACZC,SAAU,SAAAN,GAAK,OAAIF,EAAMS,oBAAoBP,EAAMQ,OAAOC,UAE9D,6BACI,4BAAQC,SAAUZ,EAAMa,aAAxB,UAEA,4BACIC,QAASd,EAAMe,oBACfH,SAAUZ,EAAMa,aAFpB,yBCbVG,G,wDACF,aAAe,IAAD,8BACV,gBAEKC,MAAQ,CACTC,WAAY,GACZC,MAAO,GACPC,iBAAiB,GAGrB,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAVT,E,0DAaW,IAAD,OAAZE,EAAY,uDAAJ,GAChBC,KAAKC,SAAS,CAAEN,iBAAiB,IAEjCO,MAAM,0CAAD,OAEGF,KAAKR,MAAMC,WAFd,kBAGSM,GACV,CACII,OAAQ,MACRC,QAAS,CACLC,OAAQ,sBAIfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACF,IAAMd,EAAQc,EAAKC,QACnB,EAAKR,SAAS,CACVP,QACAC,iBAAiB,S,qCAKlBT,GACXc,KAAKC,SAAS,CAAER,WAAYP,M,oCAI5B,OACI,wBAAIN,UAAU,cACToB,KAAKR,MAAME,MAAMgB,KAAI,SAAAC,GAAI,OAAI,wBAAIC,IAAKD,EAAKE,IAAKF,EAAKG,Y,+BAKxD,IAAD,OACL,OACI,yBAAKlC,UAAU,OACX,yBAAKA,UAAU,OAAOmC,IAAI,6BAA8BC,IAAK,QAE7D,kBAAC,EAAD,CACIrC,aAAcqB,KAAKF,YACnBd,oBAAqBgB,KAAKJ,eAC1BR,YAAaY,KAAKR,MAAMG,gBACxBL,oBAAqB,kBAAM,EAAKQ,YAAY,MAG/CE,KAAKR,MAAMG,gBACN,yBACAK,KAAKiB,mB,GAhETC,IAAMC,YAsElBC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,CAAKC,QAAQ,QAAUL,GAGxB7B,QCnEKmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNP,IAASC,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFV,SAASC,eAAe,SDyHpB,kBAAmBU,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3d9565d0.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchForm.css';\n\nconst SearchForm = props => {\n    const onSubmit = event => {\n        event.preventDefault();\n        props.onFormSubmit();\n    };\n    return (\n        <form onSubmit={onSubmit} className=\"search-form\">\n            <input\n                type=\"text\"\n                placeholder=\"Enter search term...\"\n                onChange={event => props.onSearchValueChange(event.target.value)}\n            />\n            <div>\n                <button disabled={props.isSearching}>Search</button>\n\n                <button\n                    onClick={props.onSingleSearchClick}\n                    disabled={props.isSearching}\n                >\n                    I'm Feeling Funny\n                </button>\n            </div>\n        </form>\n    );\n};\n\nexport default SearchForm;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SearchForm from './SearchForm';\nimport './styles.css';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            searchTerm: '',\n            jokes: [],\n            isFetchingJokes: false\n        };\n\n        this.onSearchChange = this.onSearchChange.bind(this);\n        this.searchJokes = this.searchJokes.bind(this);\n    }\n\n    searchJokes(limit = 20) {\n        this.setState({ isFetchingJokes: true });\n\n        fetch(\n            `https://icanhazdadjoke.com/search?term=${\n                this.state.searchTerm\n            }&limit=${limit}`,\n            {\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json'\n                }\n            }\n        )\n            .then(response => response.json())\n            .then(json => {\n                const jokes = json.results;\n                this.setState({\n                    jokes,\n                    isFetchingJokes: false\n                });\n            });\n    }\n\n    onSearchChange(value) {\n        this.setState({ searchTerm: value });\n    }\n\n    renderJokes() {\n        return (\n            <ul className=\"jokes-list\">\n                {this.state.jokes.map(item => <li key={item.id}>{item.joke}</li>)}\n            </ul>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <img className=\"logo\" src=\"/google-dad-jokes-logo.png\"  alt={\"idk\"}/>\n\n                <SearchForm\n                    onFormSubmit={this.searchJokes}\n                    onSearchValueChange={this.onSearchChange}\n                    isSearching={this.state.isFetchingJokes}\n                    onSingleSearchClick={() => this.searchJokes(1)}\n                />\n\n                {this.state.isFetchingJokes\n                    ? 'searching for jokes...'\n                    : this.renderJokes()}\n            </div>\n        );\n    }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App version=\"1.0\" />, rootElement);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}